{
  "active": true,
  "connections": {
    "When clicking \"Execute Workflow\"": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook_Get_User_By_Email": {
      "main": [
        [
          {
            "node": "Get User by email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User by email": {
      "main": [
        [
          {
            "node": "IF_Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF_Exist": {
      "main": [
        [
          {
            "node": "Generate Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token1": {
      "main": [
        [
          {
            "node": "Insert user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert user": {
      "main": [
        [
          {
            "node": "SendGrid1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token": {
      "main": [
        [
          {
            "node": "UPDATE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SendGrid": {
      "main": [
        [
          {
            "node": "RespondExists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UPDATE": {
      "main": [
        [
          {
            "node": "SendGrid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SendGrid1": {
      "main": [
        [
          {
            "node": "RespondNotExist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook_Generate_AI": {
      "main": [
        [
          {
            "node": "Get User by email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User by email1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request_v2": {
      "main": [
        [
          {
            "node": "Respond to Webhook_v2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook_GenerateAI_V2": {
      "main": [
        [
          {
            "node": "HTTP Request_v2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-01-29T10:18:42.512Z",
  "id": "52",
  "name": "JorgeligLabs_InmoAI",
  "nodes": [
    {
      "parameters": {},
      "id": "018268d6-e0a2-434a-9b03-a3fbd675a222",
      "name": "When clicking \"Execute Workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        200,
        -20
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * from users"
      },
      "id": "86081fec-d588-4fda-9166-ee81098152a9",
      "name": "MySQL",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        400,
        -180
      ],
      "notesInFlow": true,
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "26",
          "name": "hola_InmoAI"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fde2b9f8-6788-49f5-973f-4ea201bb6b3d",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "882aebb0-1e9d-42a2-9b11-cf592de8becf",
      "name": "Webhook_Get_User_By_Email",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        720,
        180
      ],
      "webhookId": "fde2b9f8-6788-49f5-973f-4ea201bb6b3d"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=Select * from users where email = '{{ $json[\"body\"][\"email\"] }}'"
      },
      "id": "d9d051fd-267f-4b26-8eac-6da7fe925850",
      "name": "Get User by email",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        940,
        180
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "26",
          "name": "hola_InmoAI"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"email\"] }}",
              "operation": "contains",
              "value2": "@"
            }
          ]
        }
      },
      "id": "ac76a8ac-1c24-4be0-a440-de5c5915ac7f",
      "name": "IF_Exist",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\n\nfunction generateToken() {\n  let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let token = \"\";\n  for (let i = 0; i < 6; i++) {\n    token += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return token;\n}\n\nfor (const item of $input.all()) {\n  var token = Math.floor(100000 + Math.random() * 900000);\n  item.json.token = generateToken();\n}\n\nreturn $input.all();"
      },
      "id": "13569bee-7334-44f7-885f-f5a7bb91fa70",
      "name": "Generate Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\n\nfunction generateToken() {\n  let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let token = \"\";\n  for (let i = 0; i < 6; i++) {\n    token += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return token;\n}\n\nfor (const item of $input.all()) {\n  var token = Math.floor(100000 + Math.random() * 900000);\n  item.json.token = generateToken();\n}\n\nreturn $input.all();"
      },
      "id": "c6f62257-09ef-4056-9793-579c438bbd81",
      "name": "Generate Token1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        260
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=\n\nINSERT INTO `users` (`id`, `name`, `email`, `token`, `created`, `modifed`) VALUES (NULL, '{{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"name\"] }}', ' {{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"email\"] }}', ' {{ $json[\"token\"] }}', current_timestamp(), current_timestamp());\n"
      },
      "id": "c07f53d8-73f7-49dc-8031-0fe82969c55b",
      "name": "Insert user",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1580,
        260
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "26",
          "name": "hola_InmoAI"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n\"id\": \"{{ $node[\"Get User by email\"].json[\"id\"] }}\",\n\"name\": \"{{ $node[\"Get User by email\"].json[\"name\"] }}\",\n\"email\": \"{{ $node[\"Get User by email\"].json[\"email\"] }}\",\n\"token\": \"{{ $node[\"Generate Token\"].json[\"token\"] }}\"\n}  ",
        "options": {}
      },
      "id": "e9adb0c0-4125-43ff-948e-698d5acd08c7",
      "name": "RespondExists",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1940,
        100
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "=  \n\n{\n\"id\": \"{{ $node[\"Insert user\"].json[\"insertId\"] }}\",\n\"name\": \"{{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"name\"] }}\",\n\"email\": \"{{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"email\"] }}\",\n\"token\": \"{{ $node[\"Generate Token1\"].json[\"token\"] }}\"\n}  ",
        "options": {}
      },
      "id": "272f41ef-1e18-40cf-9358-5ebd09199095",
      "name": "RespondNotExist",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1940,
        260
      ]
    },
    {
      "parameters": {
        "resource": "mail",
        "fromEmail": "hola@jorgeliglabs.com",
        "fromName": "Jorgelig Labs",
        "toEmail": "={{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"email\"] }}",
        "subject": "Token de validacion",
        "contentType": "text/html",
        "contentValue": "=Hola {{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"name\"] }},\n\nTu token de validacion es:\n\n<strong>{{ $node[\"Generate Token\"].json[\"token\"] }}</strong>",
        "additionalFields": {}
      },
      "id": "44615e45-fb62-4655-b23d-90cf822cf672",
      "name": "SendGrid",
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1,
      "position": [
        1760,
        100
      ],
      "credentials": {
        "sendGridApi": {
          "id": "6",
          "name": "SendGrid account"
        }
      }
    },
    {
      "parameters": {
        "resource": "mail",
        "fromEmail": "hola@jorgeliglabs.com",
        "fromName": "Jorgelig Labs",
        "toEmail": "={{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"email\"] }}",
        "subject": "Token de validacion",
        "contentType": "text/html",
        "contentValue": "Hola {{ $node[\"Webhook_Get_User_By_Email\"].json[\"body\"][\"name\"] }},  Tu token de validacion es:  <strong>{{ $node[\"Generate Token1\"].json[\"token\"] }}</strong>",
        "additionalFields": {}
      },
      "id": "a70ba62a-971e-4674-82a3-c80692987b35",
      "name": "SendGrid1",
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1,
      "position": [
        1760,
        260
      ],
      "credentials": {
        "sendGridApi": {
          "id": "6",
          "name": "SendGrid account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "name"
        },
        "columns": "token"
      },
      "id": "737b211a-7f8f-4293-a7b5-f6d04f4ff477",
      "name": "UPDATE",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1580,
        100
      ],
      "credentials": {
        "mySql": {
          "id": "26",
          "name": "hola_InmoAI"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "37b1e7bf-a478-4f2f-8e23-e3d976bfd8c5",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "48fdb088-f134-483b-b98e-fe7213ea289f",
      "name": "Webhook_Generate_AI",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        720,
        580
      ],
      "webhookId": "37b1e7bf-a478-4f2f-8e23-e3d976bfd8c5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=Select * from users where token = '{{ $json[\"body\"][\"token\"] }}'"
      },
      "id": "e99f5b41-b6e3-424a-b5df-2805ce17555f",
      "name": "Get User by email1",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        960,
        580
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "26",
          "name": "hola_InmoAI"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-davinci-003"
            },
            {
              "name": "prompt",
              "value": "=        \n\nTipo: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_type\"] }}\nPrecio: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_price\"] }} MXN\nOperacion: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_operation\"] }}\nUbicacion: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_city\"] }}, {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_state\"] }} en\nHabitaciones: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_bedrooms\"] }}\nAño de construccion: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_yearBuilt\"] }}\nMetros cuadrados de construccion: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_constructionSize\"] }}\nEstacionamientos: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_parkingSpaces\"] }}\nAmenidades: {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_amenities\"] }}\n\n\nGenera un titulo con el tipo, el precio, operacion y ubicacion correcta en caso que este mal escrita, el titulo debe ser llamativo y tres variantes para la descripcion usando todos los datos para publicar el inmueble y llamar la atencion al que entre a la ficha del inmueble y desee hacer la {{ $node[\"Webhook_Generate_AI\"].json[\"body\"][\"property_operation\"] }} el inmueble el inmueble\n\n"
            },
            {
              "name": "temperature",
              "value": 0.75
            },
            {
              "name": "max_tokens",
              "value": 1500
            },
            {
              "name": "top_p",
              "value": 1
            },
            {
              "name": "frequency_penalty",
              "value": 0.57
            },
            {
              "name": "presence_penalty",
              "value": 0.57
            }
          ]
        },
        "options": {}
      },
      "id": "89540b6d-eee4-4cd9-8e18-d49db9cff037",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1180,
        580
      ]
    },
    {
      "parameters": {
        "content": "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\n\nsk_test_51Kzee9CKfQuGbAxT1dJSqwJIX2OfLCUu1iZSNoF7718VYVzKE7PX1JtMdsQu6wmZPn88vz3T6fNrc0nGzx5n07RZ004rwCkIbY\n\n",
        "height": 211.4435695538059,
        "width": 725.7112386911006
      },
      "id": "f5b0bce7-deb1-4269-ae86-152429a139e3",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        40,
        348.5564304461941
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n\n    const text = item.json.choices[0].text;\n  const splitText = text.split(\"Descripcion\");\nconst title = splitText[0].substring(8);\nconst desc1 = \"Descripcion\" + splitText[1];\nconst desc2 = \"Descripcion\" + splitText[2];\nconst desc3 = \"Descripcion\" + splitText[3];\n\n  item.json.title = title;\n    item.json.desc1 = desc1;\n  item.json.desc2 =  desc2;\n  item.json.desc3 = desc3;\n\n}\n\nreturn $input.all();"
      },
      "id": "8723832d-225e-4925-9a07-089bde721f3e",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1400,
        580
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3c1eed76-03a6-49f6-8342-a278eaf85f48",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1600,
        580
      ]
    },
    {
      "parameters": {
        "resource": "customer",
        "operation": "getAll",
        "filters": {}
      },
      "id": "40677823-e92f-448e-bf15-7530c458e62b",
      "name": "Stripe",
      "type": "n8n-nodes-base.stripe",
      "typeVersion": 1,
      "position": [
        420,
        180
      ],
      "alwaysOutputData": true,
      "credentials": {
        "stripeApi": {
          "id": "27",
          "name": "Stripe TEST"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.stripe.com/v1/customers/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Basic 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"
            }
          ]
        },
        "options": {}
      },
      "id": "9b4f2ca4-f546-4af3-a45e-e048e1ef4ef3",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        420,
        -20
      ]
    },
    {
      "parameters": {
        "path": "45389333-8cc3-4613-a0f4-03130ff84f6e",
        "options": {}
      },
      "id": "387cda59-78d5-495f-8ea5-a87998dee052",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        2060,
        660
      ],
      "webhookId": "45389333-8cc3-4613-a0f4-03130ff84f6e"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "79421fe1-1af1-488a-bf61-bbfc2d44d87b",
      "name": "Respond to Webhook_v2",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1180,
        800
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-davinci-003"
            },
            {
              "name": "prompt",
              "value": "=        {\n  \"prompt\": \"Por favor, genera descripciones de una propiedad inmobiliaria que incluya información de las amenidades más importantes que atraerán al público objetivo seleccionado. Aquí están los detalles de la propiedad:\",\n  \"property_details\": {\n    \"operation\": \"{{ $json[\"body\"][\"property_operation\"] }}\",\n    \"property_type\": \"{{ $json[\"body\"][\"property_type\"] }}\",\n    \"price\": {{ $json[\"body\"][\"property_price\"] }},\n    \"location\": \"{{ $json[\"body\"][\"property_city\"] }}, {{ $json[\"body\"][\"property_state\"] }}\",\n    \"target_audience\": [\n      \"jovenes\",\n      \"familia\"\n    ],\n    \"amenities\": [{{$json[\"body\"][\"property_amenities\"]}}],\n\"construction_size\": \"{{$json[\"body\"][\"property_constructionSize\"]}}\",\n\"parking_spaces\":\"{{$json[\"body\"][\"property_parkingSpaces\"]}}\",\n\"bedrooms\":\"{{$json[\"body\"][\"property_bedrooms\"]}}\",\n\"year_built\":\"{{$json[\"body\"][\"property_yearBuilt\"]}}\"\n  },\n  \"constraints\": {\n    \"item_constraint\": {\n      \"title\": {\n        \"template\": \"$property_type en $operation$ por $price en $location\",\n        \"length\": {\n          \"max\": 50,\n          \"min\": 20\n        }\n      },\n      \"short_description\": {\n        \"length\": {\n          \"max\": 15\n        },\n        \"text_style\": {\n          \"writing_tone\": \"friendly\",\n          \"sentence_structure\": \"dynamic, perplexity, burstiness\"\n        }\n      },\n      \"long_description\": {\n        \"length\": {\n          \"max\": 250,\n          \"min\": 200\n        },\n        \"text_style\": {\n          \"writing_tone\": \"friendly\",\n          \"sentence_structure\": \"dynamic, perplexity, burstiness\"\n        }\n      }\n    },\n    \"minimum_information\": [\n      \"La descripción debe ser clara, precisa y no engañosa.\",\n      \"Debe incluir elementos mínimos que deben contener los contratos relacionados, según la NOM-247-SE-2021 pero sin mencionarla en el texto.\",\n\"descripcion corta selecciona la mejor amenidad, la ubicacion, precio y un llamado a la accion segun el public objetivo seleccioando\",\n\"En cada descripcion larga selecciona las amenidades mas importantes para el publico objetivo seleccionado\",\n      \"El resultado generado debe en formato JSON, la respuesta debe ser un arreglo de resultados con igual longitud que el listado de target_audience, solo un item por cada publico objetivo con los datos: title, short_description,long_description,target_audience.\"\n    ],\n    \"text_quality\": \"El texto generado debe ser lo más humano posible, en español, y con un buen equilibrio entre perplexity y burstiness\",\n    \"number_prices_format\": \"price:,.0f\"\n  },\n  \"total_item_response_length\": \"igual al numero de elementos en target_audience\",\n  \"context_per_item\": \"no mezclar mas de un publico objetivo por descripcion\"\n}"
            },
            {
              "name": "temperature",
              "value": 0.75
            },
            {
              "name": "max_tokens",
              "value": 1500
            },
            {
              "name": "top_p",
              "value": 1
            },
            {
              "name": "frequency_penalty",
              "value": 0.57
            },
            {
              "name": "presence_penalty",
              "value": 0.57
            }
          ]
        },
        "options": {}
      },
      "id": "d967e4c8-acd2-41b2-9906-e2e39b814519",
      "name": "HTTP Request_v2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        960,
        800
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "171d427f-06b3-4a67-b67f-2f6c7782a88a",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "ead41588-a632-4223-b7ba-fec1fb0f985d",
      "name": "Webhook_GenerateAI_V2",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        720,
        800
      ],
      "webhookId": "171d427f-06b3-4a67-b67f-2f6c7782a88a"
    }
  ],
  "pinData": {
    "Generate Token": [
      {
        "json": {
          "id": 1,
          "name": null,
          "email": "jorgeligg@gmail.com",
          "token": "XB4IQZ",
          "created": "2023-01-29T00:00:00.000Z",
          "modifed": "2023-01-29T00:00:00.000Z"
        }
      }
    ],
    "Webhook_Get_User_By_Email": [
      {
        "json": {
          "headers": {
            "host": "n8n.jorgeliglabs.com",
            "user-agent": "got (https://github.com/sindresorhus/got)",
            "content-length": "46",
            "accept-encoding": "gzip",
            "cdn-loop": "cloudflare",
            "cf-connecting-ip": "38.105.232.217",
            "cf-ipcountry": "US",
            "cf-ray": "7911b8fe49831a30-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "content-type": "application/json",
            "x-forwarded-for": "38.105.232.217, 172.70.114.215",
            "x-forwarded-host": "n8n.jorgeliglabs.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "b7a27ff89b91",
            "x-real-ip": "172.70.114.215"
          },
          "params": {},
          "query": {},
          "body": {
            "email": "jorgeligg@gmail.com",
            "name": "Jorge"
          }
        }
      }
    ],
    "Get User by email": [
      {
        "json": {}
      }
    ],
    "Generate Token1": [
      {
        "json": {
          "token": "2MCX2G"
        }
      }
    ],
    "Insert user": [
      {
        "json": {
          "fieldCount": 0,
          "affectedRows": 1,
          "insertId": 7,
          "info": "",
          "serverStatus": 2,
          "warningStatus": 0
        }
      }
    ],
    "Webhook_Generate_AI": [
      {
        "json": {
          "headers": {
            "host": "n8n.jorgeliglabs.com",
            "user-agent": "got (https://github.com/sindresorhus/got)",
            "content-length": "611",
            "accept-encoding": "gzip",
            "cdn-loop": "cloudflare",
            "cf-connecting-ip": "38.105.232.217",
            "cf-ipcountry": "US",
            "cf-ray": "7911fa973e0c1899-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "content-type": "application/json",
            "x-forwarded-for": "38.105.232.217, 172.70.110.151",
            "x-forwarded-host": "n8n.jorgeliglabs.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "b7a27ff89b91",
            "x-real-ip": "172.70.110.151"
          },
          "params": {},
          "query": {},
          "body": {
            "message": "This is a sample result, it has been generated ⬇️",
            "Submitted at": "2023-01-29T12:30:23.859Z",
            "name": "answer value",
            "token": "answer value",
            "Not Match Token": "Intentar de nuevo",
            "email": "answer value",
            "property_type": "Departamento",
            "property_price": "20",
            "property_state": "answer value",
            "property_city": "answer value",
            "property_bedrooms": "20",
            "property_yearBuilt": "20",
            "property_constructionSize": "20",
            "property_parkingSpaces": "20",
            "property_amenities": "Alberca, Área de juegos, Spa, Cancha de tenis, Elevador, Jacuzzi, Vigilancia",
            "user_id": "content",
            "user_name": "content",
            "user_token": "content"
          }
        }
      }
    ],
    "HTTP Request": [
      {
        "json": {
          "id": "cmpl-6e1EMJjeXMXRprbbGmmsO1iH3m9X1",
          "object": "text_completion",
          "created": 1674995870,
          "model": "text-davinci-003",
          "choices": [
            {
              "text": "\nTitulo: ¡Excelente oportunidad! Departamento en Venta por 20 MXN - answer value, answer value\n\nDescripcion 1: ¡No pierdas esta excelente oportunidad de adquirir un hermoso departamento a un precio increíblemente bajo! Ubicado en answer value, answer value, este lujoso inmueble cuenta con 20 habitaciones, 20 metros cuadrados de construcción y 20 estacionamientos para su comodidad. Disfrute de sus amenidades como alberca, área de juegos, spa, cancha de tenis, elevador, jacuzzi y vigilancia. ¡No esperes más! \n\nDescripcion 2: ¡Ahora tienes la oportunidad perfecta para adquirir tu hogar ideal! Ubicado en answer value, answer value este precioso departamento tiene todo lo que necesitas para vivir cómodamente. Cuenta con 20 habitaciones construidas hace 20 años junto con 20 metros cuadrados de construcción y 20 estacionamientos para tu comodidad. Además disfruta del lujo que ofrece sus amenidades como alberca, área de juegos, spa, cancha de tenis , elevador , jacuzzi y vigilancia. ¡No hay mejor oportunidad que ésta! \n\nDescripcion 3: Este hermoso departamento se encuentra ubicado en answer value , answer value es el lugar ideal donde puedes encontrar tu nuevo hogar. Cuenta con un precio sorprendentemente bajo y ofrece muchas características ideales para vivir cómodamente. Cuenta con 20 habitaciones construidas hace aproximadamente 20 años junto con los espacios necesarios (20 metros cuadrados) y los estacionamientos requeridos (20). Aprovecha las amenidades incluidas; alberca , área de juegos , spa , cancha tennis , elevador , jacuzzi y vigilancia .¡Y no te pierdas esta gran oportunidad ahora mismo!",
              "index": 0,
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 221,
            "completion_tokens": 568,
            "total_tokens": 789
          }
        }
      }
    ],
    "Webhook_GenerateAI_V2": [
      {
        "json": {
          "headers": {
            "host": "n8n.jorgeliglabs.com",
            "user-agent": "got (https://github.com/sindresorhus/got)",
            "content-length": "433",
            "accept-encoding": "gzip",
            "cdn-loop": "cloudflare",
            "cf-connecting-ip": "38.105.232.217",
            "cf-ipcountry": "US",
            "cf-ray": "794b21cbeb7a8cc8-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "content-type": "application/json",
            "x-forwarded-for": "38.105.232.217, 172.70.114.42",
            "x-forwarded-host": "n8n.jorgeliglabs.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "b7a27ff89b91",
            "x-real-ip": "172.70.114.42"
          },
          "params": {},
          "query": {},
          "body": {
            "submittedAt": "2023-02-05T10:57:35.771Z",
            "property_operation": "Venta",
            "property_type": "Departamento",
            "property_price": "3500000",
            "property_state": "Nuevo Leon",
            "property_city": "Monterrey",
            "property_bedrooms": "4",
            "property_yearBuilt": "2018",
            "property_constructionSize": "80",
            "property_parkingSpaces": "4",
            "property_amenities": "Alberca, Elevador, Vigilancia, Jacuzzi",
            "email": "jorgeligg@gmail.com",
            "name": "Jorge",
            "mobile": "+528114117118"
          }
        }
      }
    ]
  },
  "settings": {},
  "staticData": null,
  "tags": [],
  "triggerCount": 4,
  "updatedAt": "2023-02-06T04:26:14.000Z",
  "versionId": "f9af8bff-9511-4c0d-9486-934b9ceb883b"
}